C
C     FUNCTION: PALAEOSTRESS ANALYSIS USING A LOW-DIVERSITY GROUP OF FAULT-SLIP  
C               (F-S) DATA UNDER THE CONSTRAINT OF A MEANINGFUL SYMMETRICAL F-S 
C               PAIR AND UNDER THE ASSUMPTION OF THE MAXIMIZIATION OF THE SUM OF  
C               THE RESOLVED SHEAR STRESSES ALONG THE SLIP LINES ON THE FAULT 
C               PLANES. 
C       AUTHOR: YEHUA SHAN
C         DATE: JUNY 14, 2022
C
C     EXPLANATIONS ABOUT VARIABLES TO BE INPUT OR MODIFIED:
C         NUM - NUMBER OF MEASURED F-S DATA.
C     FP(?,?) - DIP DIRECTIONS AND ANGLES OF FAULT PLANES.
C     SL(?,?) - BEARINGS AND PLUNGES OF SLIP LINES.
C       MV(?) - TYPES OF SLIP SENSE:
C               1 FOR DOWNWARD DIP-SLIP SENSE,  
C               2 FOR UPWARD DIP-SLIP SENSE,
C               3 FOR DEXTRAL STRIKE-SLIP SENSE, AND 
C               4 FOR SINISTRAL STRIKE-SLIP SENSE.
C	 CRANG1 - CRITICAL ANGLE BETWEEN  FAULT PLANE POLES, 20 DEGREES AT DEFAULT. 
C               A F-S PAIR WITH A SMALLER ANGLE IS EXCLUDED.
C	 CRANG2 - CRITICAL ANGLE BETWEEN NULL-SHEAR DIRECTIONS ON FAULT PLANES, 5 
C               DEGREES AT DEFAULT. A F-S PAIR WITH A SMALLER  ANGLE IS EXCLUDED.  
C	 CRANG3 - CRITICAL ANGLE FOR TWO FAULT-SLIP DATA, 5 DEGREES AT DEFAULT. A    
C               F-S PAIR WITH A SMALLER ANGLE IS ACCEPTED.              
C	 CRANG4 - CRITICAL ANGLE BETWEEN INTERSECTION OF TWO FAULT PLANES AND POLE
C               TO SLIP LINES ON THE FAULTS, 30 DEGREE AT DEFAULT. A F-S PAIR WITH     
C               A SMALLER ANGLE IS ACCEPTED.           
C
C	EXPLANATION OF OUTPUT FILES:
C  RESULT.TXT - INCLUDES 1) OBJECTIVE FUNCTION VALUE, 2) MISFITS AND RESOLVED SHEAR
C               STRESS FOR  SLIP LINES, AND 3) STRESS ESTIMATE FOR EACH MEANINGFUL
C               PAIR, AND MEAN STRESS ESTIMATE FOR >1 MEANINGFUL PAIRS.
$DEBUG
      PROGRAM MAIN
      PARAMETER (NUMBS=2000)
      INTEGER NG(NUMBS),NUM,N1,N2,N3,N4,N5,N6,N7
      REAL B(NUMBS),PI,CRANG1,CRANG2,CRANG3,CRANG4
	REAL PCRT,CRIT,ACRT,SCRT
      EQUIVALENCE (B,NG)
      CHARACTER *12 AF
	PI=180.0/3.1415926
	CRANG1=20.0
	CRANG2=5.0
	CRANG3=5.0
	CRANG4=30.0
	PCRT=COS(CRANG1/PI) 	
      CRIT=COS(CRANG2/PI)
	ACRT=COS(CRANG3/PI)
	SCRT=COS(CRANG4/PI) 
	CALL GETDATAFILE(AF,NUM)
      N1=1
      N2=N1+NUM*2
      N3=N2+NUM*2
	N4=N3+NUM
      N5=N4+NUM*3
	N6=N5+NUM*3
	N7=N6+NUM*3	   
   	WRITE (*,*)
	WRITE (*,*) "    USED ARRAY SIZE: ",N7
	WRITE (*,*) "ASSIGNED ARRAY SIZE: ",NUMBS
	IF (NUMBS.LE.N7) STOP " TOO SMALL ASSIGNED ARRAY SIZE."
	WRITE (*,*)	 
	CALL DATAINPUT(AF,NUM,B(N1),B(N2),NG(N3))
      CALL PREPROCESS(NUM,B(N1),B(N2),NG(N3),B(N4),B(N5),B(N6)) 
	CALL SYMMFAULTS(NUM,B(N4),B(N5),B(N6),PCRT,CRIT,ACRT,SCRT)
      WRITE (*,*) "           >> END <<"
      END							  	

	
      SUBROUTINE GETDATAFILE(AF,NUM)
      CHARACTER *12 AF
      WRITE (*,*)
      WRITE (*,*) ">>TO SEARCH FOR STRESS(ES) FROM FAULT-SLIP DATA<<"
      WRITE (*,*)
      WRITE (*,*) "PLEASE INPUT FILE NAME: "
      READ (*,'(A)') AF
	WRITE (*,*)
      OPEN (5,FILE=AF,STATUS='OLD')
      READ (5,*) NUM
	CLOSE (5)
	END


      SUBROUTINE DATAINPUT(AF,NUM,FP,SL,MV)
      REAL FP(NUM,2),SL(NUM,2)
      INTEGER MV(NUM),I,J      
	CHARACTER *12 AF
      OPEN (5,FILE=AF,STATUS='OLD')
      READ (5,*) NUM
      DO 10 I=1,NUM
        READ (5,*) (FP(I,J),J=1,2),(SL(I,J),J=1,2),MV(I) 
	  CALL CHECKDATA(I,FP(I,1),FP(I,2),SL(I,1),SL(I,2),MV(I))
10    CONTINUE
      CLOSE (5)
      END	 	

	
	SUBROUTINE CHECKDATA(I,DIP,DIPAN,BEAR,PLUN,MV)
	REAL PI,TLD,TLS,PLUN0
C  	TO RE-CALCULATE THE PLUNGE OF THS SLIP LINE SUCH THAT THE MODIFIED 
C     SLIP LINE IS ON HOST FAULT PLANE.
	PI=180.0/3.1415926
	TLD=1.0/TAN(DIPAN/PI)
	TLS=TLD/ABS(COS((DIP-BEAR)/PI))
	PLUN0=ATAN(1.0/TLS)*PI
	IF (ABS(PLUN-PLUN0).GT.1.0) THEN
	  WRITE (*,*) "* CORRECT SLIP PLUNGE OF FAULT:",I
	  WRITE (*,*) "INPUT AND CORRECTED PLUNGES:",PLUN,">",PLUN0
	  PLUN=PLUN0
	END IF

C  	TO TRANSFOM DEXTRAL OR SINISTRAL STRIK-SLIP SENSE INTO DOWNWARD OR 
C     UPWARD DIP-SLIP SENSE.
	IF (MV.EQ.3.OR.MV.EQ.4) THEN
	  MV=KSIGN(DIP,BEAR,PLUNGE,MV)
	  WRITE (*,*) "* TRANSFORM STRIKE-SLIP SENSE OF FAULT:",I
	END IF
10    CONTINUE 
      END  
	
     
     	INTEGER FUNCTION KSIGN(DIP,BEAR,PLUN,MV)
 	REAL BST(3),SLP(3)
	CALL DIRECTIONCOSINE(90.0+DIP,0.0,BST)
	CALL DIRECTIONCOSINE(BEAR,PLUN,SLP)
	IF (DOTPRODUCT(3,BST,SLP).GT.0.0) THEN
	  IF (MV.EQ.3) THEN
	    KSIGN=1
	  ELSE
	    KSIGN=2
	  END IF
	ELSE
	  IF (MV.EQ.3) THEN
	    KSIGN=2
	  ELSE
	    KSIGN=1
	  END IF
	END IF
	END

     
      SUBROUTINE DIRECTIONCOSINE(F1,F2,A)
      REAL A(3),PI,E1,E2
      PI=3.1415926/180.0
      E1=F1*PI
      E2=F2*PI														
      A(3)=SIN(E2)
      A(2)=COS(E2)*SIN(E1)
      A(1)=COS(E2)*COS(E1)
      END


 	REAL FUNCTION DOTPRODUCT(N,A,B)
	REAL A(N),B(N),SAB,SA2,SB2
	INTEGER I
	SAB=0.0
	SA2=0.0
	SB2=0.0
	DO 10 I=1,N
	  SAB=SAB+A(I)*B(I)
	  SA2=SA2+A(I)*A(I)
	  SB2=SB2+B(I)*B(I)
10    CONTINUE
	DOTPRODUCT=SAB/SQRT(SA2*SB2)
	END


   	SUBROUTINE PREPROCESS(NUM,FP,SL,MV,FN,TS,SC) 
	REAL FP(NUM,2),SL(NUM,2),FN(NUM,3),TS(NUM,3),SC(NUM,3)
	REAL A(3),B(3),S(3)
	INTEGER MV(NUM),I,J 
	DO 10 I=1,NUM
	  CALL DIRECTIONCOSINE(FP(I,1)+180.0,90.0-FP(I,2),A)
	  CALL DIRECTIONCOSINE(SL(I,1),SL(I,2),S)
	  CALL PERPENDICULAR(A,S,B)
	  DO 20 J=1,3
	    FN(I,J)=A(J)
	    TS(I,J)=B(J)
	    IF (MV(I).EQ.1) THEN
	      SC(I,J)=S(J)
	    ELSE
	      SC(I,J)=-S(J)
	    END IF
20      CONTINUE
10    CONTINUE
      END


	SUBROUTINE PERPENDICULAR(A,S,B)
      REAL A(3),S(3),B(3)
      B(1)=A(2)*S(3)-A(3)*S(2)
      B(2)=A(3)*S(1)-A(1)*S(3)
      B(3)=A(1)*S(2)-A(2)*S(1)
    	END
 
     	   
	SUBROUTINE SYMMFAULTS(NUM,FN,TS,SC,CRIT,PCRT,ACRT,SCRT) 
	REAL FN(NUM,3),TS(NUM,3),SC(NUM,3)
	REAL A(3),A0(3),S(3),S0(3),P1(3),P2(3)
	REAL SGS(3,3),EIGN(3,3),VALUE(3)
	REAL ACRT,TR1,TR2,ANGM,BEAR,PLUN,WANG,BIANG
	INTEGER I,IS,INP,J,K
	DO 10 I=1,3
	  DO 10 J=1,3
	    SGS(I,J)=0.0
10	CONTINUE
	OPEN (105,FILE="RESULT.TXT")
	IS=0
	DO 20 I=1,NUM-1	 
	  DO 30 J=I+1,NUM
	    TR1=0.0
	    TR2=0.0
	    DO 40 K=1,3
	      TR1=TR1+TS(I,K)*TS(J,K)
	      TR2=TR2+FN(I,K)*FN(J,K)
	      A(K)=FN(I,K)
		  S(K)=SC(I,K)
	      A0(K)=FN(J,K)
	      S0(K)=SC(J,K)
40        CONTINUE
          IF (ABS(TR1).GT.CRIT) GOTO 30
	    IF (ABS(TR2).GT.PCRT) GOTO 30
	    CALL ANGULARMISFIT(A,A0,S,S0,ANGM,P1,P2,APSP)
	    WANG=COS(ANGM*3.1415926/180.0)
	    IF (WANG.LT.ACRT) GOTO 30 
		IF (ABS(APSP).GT.SCRT) GOTO 30
	    WRITE (*,*) "SYM. FAULT-SLIP PAIR: ",I,J
		DO 50 K=1,2
		  IF (K.EQ.1) THEN	    
	        CALL AZIMUTH(P2(1),P2(2),P2(3),BEAR,PLUN)
	      ELSE
	        CALL AZIMUTH(P1(1),P1(2),P1(3),BEAR,PLUN)
	      END IF
		  BIANG=180.0-WINTANGLE(3,A,A0)
	      IF (BIANG.GT.90.0) THEN
	        INP=1
	      ELSE
	        INP=0
	      END IF
	      CALL STRESSESTIMATE(105,IS,I,J,NUM,FN,TS,SC,BEAR,PLUN,SGS)
50        CONTINUE
30      CONTINUE
20    CONTINUE       
	IF (IS.GE.2) THEN
	  WRITE (105,*)
	  WRITE (105,*) ">>MEAN STRESS ESTIMATE:"
        CALL YACOBIANMETHOD(SGS,EIGN,VALUE,3)
	  DO 60 I=1,3
	    CALL AZIMUTH(EIGN(1,I),EIGN(2,I),EIGN(3,I),BEAR,PLUN)
	    WRITE (105,*) " PRINC. AXIS: ",I
	    WRITE (105,*) "   BEARING & PLUNGE IN DEGREES: ",BEAR,PLUN
          WRITE (105,*) "   RELATIVE MAGNITUDE: ",VALUE(I)
60      CONTINUE
        SR=(VALUE(2)-VALUE(3))/(VALUE(1)-VALUE(3))
  	  WRITE (105,*) " STRESS RATIO = ",SR
	END IF
	CLOSE (105) 
	END


      SUBROUTINE ANGULARMISFIT(A1,A0,S1,S0,ANGM,P1,P2,APSP)
	REAL A0(3),A1(3),AP(3),S0(3),S1(3),SP(3),P1(3),P2(3)
	REAL PHI1,PHI2
	CALL PERPENDICULAR(A1,A0,AP)
  	CALL UNITVECTOR(3,AP)
	CALL PERPENDICULAR(S1,S0,SP)
	CALL UNITVECTOR(3,SP)
	CALL PERPENDICULAR(AP,SP,P2)
   	CALL UNITVECTOR(3,P2)
   	CALL NEGVECTOR(3,P2)
	CALL DIVIDINGPLANE(A1,A0,P2,PHI1)
	CALL DIVIDINGPLANE(S1,S0,P2,PHI2)
	ANGM=AMAX1(PHI1,PHI2)
	APSP=ABS(DOTPRODUCT(3,AP,SP))
	CALL PERPENDICULAR(P2,AP,P1)
	CALL UNITVECTOR(3,P1)
	END 


   	SUBROUTINE UNITVECTOR(N,T)
    	REAL T(N),SUM
	INTEGER I
	SUM=0.0
	DO 10 I=1,N
	  SUM=SUM+T(I)*T(I)
10   	CONTINUE
      SUM=SQRT(SUM)
	DO 20 I=1,N
	  T(I)=T(I)/SUM
20    CONTINUE
      END	   


      SUBROUTINE NEGVECTOR(N,S)
  	REAL S(N)
	INTEGER I
	DO 10 I=1,N
	  S(I)=-S(I)
10    CONTINUE
	END


	SUBROUTINE DIVIDINGPLANE(A1,A0,P2,ANGM)
	REAL A1(3),A0(3),P2(3),AMP(3),TR(2)
	INTEGER I,J
	DO 10 I=1,2
	  DO 20 J=1,3
	    IF (I.EQ.1)	THEN
	      AMP(J)=A1(J)+A0(J)
	    ELSE
	      AMP(J)=A1(J)-A0(J)
	    END IF
20      CONTINUE
        TR(I)=WINTANGLE(3,AMP,P2)
	  IF (TR(I).GT.90.0) TR(I)=180.0-TR(I)
	  TR(I)=90.0-TR(I)
10    CONTINUE
 	IF (TR(1).LT.TR(2))	THEN
	  ANGM=TR(1)
	ELSE
	  ANGM=TR(2)
	  END IF
30    CONTINUE
	END
   
		

	SUBROUTINE AZIMUTH(B1,B2,B3,DIP,DIPANGLE)
   	REAL PI,A1,A2,A3
	A1=B1
	A2=B2
      A3=B3
 	IF (A3.LT.0.0)	THEN
	  A1=-A1
	  A2=-A2
        A3=-A3
 	END IF
	PI=180.0/3.1415926
 	DIP=BEARING(A1,A2)      
      IF (SQRT(A1*A1+A2*A2).LT.0.00001) THEN
        DIPANGLE=90.0
      ELSE
        DIPANGLE=ATAN(A3/SQRT(A1*A1+A2*A2))*PI
      END IF
      END	

   
  	REAL FUNCTION BEARING(A1,A2)
 	REAL PI
	PI=180.0/3.1415926
      IF (ABS(A1).LT.0.00001) THEN
        BEARING=90.0
      ELSE
        BEARING=ATAN(ABS(A2/A1))*PI
      END IF
      IF (A1.GT.0.0) THEN
        IF (A2.LT.0.0) BEARING=360.0-BEARING
      ELSE
        IF (A2.GT.0.0) THEN
          BEARING=180.0-BEARING
        ELSE
          BEARING=180.0+BEARING
        END IF
      END IF
	END 


      SUBROUTINE UPRIGHTLINEATION(BEAR,PLUN,CM)
  	REAL CM(3,3),A(3,3),B(3,3)  	
	CALL ROTATION(1,2,-BEAR,A)
 	CALL ROTATION(1,3,90.0-PLUN,B)
      CALL MULTIPLY1(3,B,A,CM)
	END 


	SUBROUTINE ROTATION(I1,J1,ANGLE,R)
	REAL R(3,3),ANG,CS,SN
	INTEGER I,J
	DO 10 I=1,3
	  R(I,I)=1.0
	  DO 20 J=1,3
	    IF (I.NE.J) R(I,J)=0.0
20      CONTINUE
10    CONTINUE
 	ANG=ANGLE*3.1415926/180.0
	CS=COS(ANG)
	SN=SIN(ANG)
 	R(I1,I1)=CS
	R(I1,J1)=-SN
	R(J1,I1)=SN
	R(J1,J1)=CS
	END
		 

	SUBROUTINE MULTIPLY1(N,A,B,C)
	REAL A(N,N),B(N,N),C(N,N)
	INTEGER I,J,K
	DO 10 I=1,N
	  DO 10 J=1,N
	    C(I,J)=0.0
 	    DO 20 K=1,N
 	      C(I,J)=C(I,J)+A(I,K)*B(K,J)
20        CONTINUE
10    CONTINUE
      END


 	SUBROUTINE MULTIPLY2(N,A,B,C)
   	REAL A(N,N),B(N),C(N)
	INTEGER I,J
	DO 10 I=1,N
	  C(I)=0.0
	  DO 20 J=1,N
	    C(I)=C(I)+A(I,J)*B(J)
20      CONTINUE
10    CONTINUE
      END

 
      SUBROUTINE STRESSESTIMATE(IT,IS,I1,I2,NUM,FN,TS,SC,BEAR,PLUN,SGS)
	REAL FN(NUM,3),TS(NUM,3),SC(NUM,3),SGS(3,3),CM(3,3),CM0(3,3)	
	REAL SIG(3,3),SIG0(3,3),SIG1(3,3),SIGM(3,3)
	REAL RS(3,3),A(3),A0(3),B(3),B0(3),S(3),S0(3)
	REAL AD(100,3),ANG(100),ANGM(100)
	REAL WOFV,SH,PN,TR1,OFV,PI
	REAL PITCH,RAT,SP,SP1 
	INTEGER I,INUM,INP,J,KNUM,KPL
	CALL UPRIGHTLINEATION(BEAR,PLUN,CM)
	PI=180.0/3.1415926
	DO 10 I=1,3
	  DO 10 J=1,3
	    RS(I,J)=0.0
	    CM0(I,J)=CM(J,I)
10    CONTINUE
	DO 20 I=1,NUM
	  DO 30 J=1,3
	    A(J)=FN(I,J)
	    B(J)=TS(I,J)
30      CONTINUE
	  CALL MULTIPLY2(3,CM,A,A0)
        CALL MULTIPLY2(3,CM,B,B0)
	  S(1)=A0(1)*B0(1)-A0(3)*B0(3)
	  S(2)=A0(2)*B0(2)-A0(3)*B0(3)
	  S(3)=A0(1)*B0(2)+A0(2)*B0(1)
	  CALL UNITVECTOR(3,S)
	  DO 40 J=1,3
	    AD(I,J)=S(J)
40      CONTINUE
20    CONTINUE

	WOFV=-REAL(NUM)
	SP=2.0
	SP1=0.02
	KPL=0
	DO 50 PITCH=0.0,180.0-SP,SP
	  DO 50 RAT=0.0,1.0,0.02
	    DO 50 INP=1,3,1
	      CALL ANDERSONSTRESS(PITCH,RAT,INP,SIG)
            CALL MULTIPLY1(3,SIG,CM,SIG0)
	      CALL MULTIPLY1(3,CM0,SIG0,SIG1)
	      KNUM=0
	      OFV=0.0
	      DO 60 I=1,NUM
	        DO 70 J=1,3
	          A(J)=FN(I,J)
	          S(J)=SC(I,J)		       
70            CONTINUE
	        CALL CALSLIPLINE(SIG1,A,S0,SH,PN)
 	        CALL UNITVECTOR(3,S0)
 	        ANG(I)=WINTANGLE(3,S,S0)
			TR=SHEARSTRESS(SIG1,A,S)
 	        IF (ANG(I).LT.90.0) THEN
 		      KNUM=KNUM+1
  		      TR1=SIN(ANG(I)/PI)
  	          OFV=OFV+ABS(SH)
	        ELSE
                OFV=OFV-ABS(SH)
  	        END IF 
60	      CONTINUE
	      IF (KNUM.LT.NUM/2) GOTO 80			 
	      IF (ANG(I1).GE.2.0.OR.ANG(I2).GE.2.0) GOTO 80

            OFV=OFV/REAL(NUM) 
	      IF (WOFV.GT.OFV) GOTO 80
	      KPL=KPL+1
	      WOFV=OFV	      
	      INUM=KNUM
            DO 90 I=1,3
	        DO 90 J=1,3
	           SIGM(I,J)=SIG1(I,J)
90          CONTINUE
            DO 100 I=1,NUM
	        ANGM(I)=ANG(I)
100         CONTINUE
80          CONTINUE
50    CONTINUE
	IF (KPL.EQ.0) THEN
	  RETURN
     	ELSE
	  WRITE (*,*) "*MEANINGFUL"
	  DO 110 I=1,3
	    DO 110 J=1,3
	      SGS(I,J)=SGS(I,J)+SIGM(I,J)
110	  CONTINUE	  
        CALL OUTPUTRESULT(IS,IT,NUM,FN,SC,ANGM,SIGM,WOFV,INUM,
     _I1,I2,BEAR,PLUN)
	END IF
	END
     	
 
	SUBROUTINE ANDERSONSTRESS(PITCH,RAT,INP,SIG)
	REAL SIG(3,3),R(3,3),R0(3,3),SIG0(3,3),S(3)
	INTEGER I,J
	CALL ROTATION(1,2,-PITCH,R)
	S(1)=2.0
	S(2)=1.0+RAT
	S(3)=1.0
	SM=(S(1)+S(2)+S(3))/3.0
	DO 10 I=1,3
	  S(I)=S(I)-SM
	  DO 10 J=1,3
	    SIG(I,J)=0.0
	    R0(J,I)=R(I,J)
10    CONTINUE
	CALL UNITVECTOR(3,S)
	SELECT CASE (INP)
	  CASE (1)
	    SIG(1,1)=S(1)
	    SIG(2,2)=S(2)
	    SIG(3,3)=S(3)
	  CASE (2)
	    SIG(1,1)=S(1)
	    SIG(2,2)=S(3)
	    SIG(3,3)=S(2)
	  CASE (3)
	    SIG(1,1)=S(2)
	    SIG(2,2)=S(3)
	    SIG(3,3)=S(1)	
	END SELECT
	CALL MULTIPLY1(3,SIG,R,SIG0)
	CALL MULTIPLY1(3,R0,SIG0,SIG)
 	END     
		 

	REAL FUNCTION WINTANGLE(N,X,Y)
	REAL X(N),Y(N),TR,TR2,ANG
	TR=DOTPRODUCT(N,X,Y)
 	IF (ABS(TR).LT.0.0001) THEN
	  ANG=90.0
 	ELSE
	  TR2=1.0-TR*TR
 	  IF (TR2.LT.0.0) TR2=0.0001
	  ANG=ATAN(SQRT(TR2)/ABS(TR))*180.0/3.1415926
	END IF
	IF (TR.LT.0.0) ANG=180.0-ANG
	WINTANGLE=ANG
	END


	REAL FUNCTION SHEARSTRESS(SIG,A,S)
	REAL SIG(3,3),S(3),A(3),C(3)
	INTEGER I,J
	DO 10 I=1,3
	  C(I)=0.0
	  DO 10 J=1,3
	    C(I)=C(I)+SIG(I,J)*A(J)
10    CONTINUE
	SHEARSTRESS=0.0
	DO 20 I=1,3
	  SHEARSTRESS=SHEARSTRESS+C(I)*S(I)
20    CONTINUE
	END
 
 
	SUBROUTINE OUTPUTRESULT(IS,IT,NUM,FN,SC,ANGM,SIGM,WOFV,INUM,
     _I1,I2,BEAR,PLUN)
	REAL FN(NUM,3),SC(NUM,3),ANGM(100),SIGM(3,3)
	REAL EIGN(3,3),VALUE(3),P(3),S(3),SH
	REAL WOFV,BEAR0,PLUN0,SR
	INTEGER I,J	
	IS=IS+1
	WRITE (IT,*) "NO:",IS
	WRITE (IT,*) "SYM. FAULT-SLIP PAIR: ",I1,I2	
      WRITE (IT,*) "DIRECTION OF KNOWN PRIN. AXIS: ",BEAR,PLUN	
      WRITE (IT,*) "OBJ. FUNC. VALUE = ",WOFV
	WRITE (IT,*) "ANGULAR MISFITS AND SHEAR STRESSES FOR SLIP LINES:"
      DO 10 I=1,NUM
	  DO 20 J=1,3
	    P(J)=FN(I,J)
	    S(J)=SC(I,J)
20      CONTINUE
	  SH=SHEARSTRESS(SIGM,P,S)
	  WRITE (IT,*) I,ANGM(I),SH
10    CONTINUE
	WRITE (IT,*) "FIT DATA = ",INUM		
	WRITE (IT,*) "STRESS ESTIMATE:"
      CALL YACOBIANMETHOD(SIGM,EIGN,VALUE,3)
	DO 30 I=1,3
	  CALL AZIMUTH(EIGN(1,I),EIGN(2,I),EIGN(3,I),BEAR0,PLUN0)
	  WRITE (IT,*) " PRINC. AXIS: ",I
	  WRITE (IT,*) "   BEARING & PLUNGE IN DEGREES: ",BEAR0,PLUN0
        WRITE (IT,*) "   RELATIVE MAGNITUDE: ",VALUE(I)
30    CONTINUE
      SR=(VALUE(2)-VALUE(3))/(VALUE(1)-VALUE(3))
  	WRITE (IT,*) " STRESS RATIO = ",SR
	WRITE (IT,*)
	END	   
    

      SUBROUTINE YACOBIANMETHOD(A,EIGEN,VALUE,N)
      REAL A(N,N),EIGEN(N,N),VALUE(N)
       REAL ESP,FM,X,Y,OMEGA,CN,SN
      INTEGER I,J,K,L,IP,JQ
      ESP=0.00001
      DO 10 I=1,N
        EIGEN(I,I)=1.0
        DO 10 J=I+1,N
          EIGEN(I,J)=0.0
          EIGEN(J,I)=0.0
10    CONTINUE
 	 
      DO 20 L=1,200
        FM=0.0
        DO 30 I=1,N
          DO 30 J=1,N
            IF (I.NE.J.AND.ABS(A(I,J)).GT.FM) THEN
              FM=ABS(A(I,J))
              IP=I
              JQ=J
            END IF
30      CONTINUE
C        WRITE (*,*) L,FM
        IF (FM.LT.ESP) GOTO 200
        X=-A(IP,JQ)
        Y=(A(JQ,JQ)-A(IP,IP))/2.0
        OMEGA=X/SQRT(X*X+Y*Y)
        IF (Y.LT.0.0) OMEGA=-OMEGA
        SN=1.0+SQRT(1.0-OMEGA*OMEGA)
        SN=OMEGA/SQRT(2.0*SN)
        CN=SQRT(1.0-SN*SN)
        FM=A(IP,IP)
        A(IP,IP)=FM*CN*CN+A(JQ,JQ)*SN*SN+A(IP,JQ)*OMEGA
        A(JQ,JQ)=FM*SN*SN+A(JQ,JQ)*CN*CN-A(IP,JQ)*OMEGA
        A(IP,JQ)=0.0
        A(JQ,IP)=0.0
        DO 40 J=1,N
          IF (J.NE.IP.AND.J.NE.JQ) THEN
            FM=A(IP,J)
            A(IP,J)=FM*CN+A(JQ,J)*SN
            A(JQ,J)=-FM*SN+A(JQ,J)*CN
          END IF
40      CONTINUE
        DO 50 I=1,N
          IF (I.NE.IP.AND.I.NE.JQ) THEN
            FM=A(I,IP)
            A(I,IP)=FM*CN+A(I,JQ)*SN
            A(I,JQ)=-FM*SN+A(I,JQ)*CN
          END IF
50      CONTINUE
        DO 60 I=1,N
          FM=EIGEN(I,IP)
          EIGEN(I,IP)=FM*CN+EIGEN(I,JQ)*SN
          EIGEN(I,JQ)=-FM*SN+EIGEN(I,JQ)*CN
60      CONTINUE
20    CONTINUE
      STOP "BELOW RESOLUTION!"

200   DO 70 I=1,N
        VALUE(I)=A(I,I)
        FM=0.0
        DO 80 J=1,N
          FM=FM+EIGEN(J,I)*EIGEN(J,I)
80      CONTINUE
        FM=SQRT(FM)
        DO 90 J=1,N
          EIGEN(J,I)=EIGEN(J,I)/FM
90      CONTINUE
70    CONTINUE

      DO 100 I=1,N-1
        DO 100 J=I+1,N
          IF (VALUE(I).LT.VALUE(J)) THEN
            FM=VALUE(I)
            VALUE(I)=VALUE(J)
            VALUE(J)=FM
            DO 110 K=1,N
              FM=EIGEN(K,I)
              EIGEN(K,I)=EIGEN(K,J)
              EIGEN(K,J)=FM
110         CONTINUE
          END IF
100   CONTINUE
      END


C	CALCULATE THE THEORETICAL SLIP LINE, SHEAR STRESS (SH), AND 
C     NORMAL STRESS (PN) ON A FAULT PLANE (P) UNDER A STRESS (SG) 
	SUBROUTINE CALSLIPLINE(SG,P,S,SH,PN)
	REAL SG(3,3),P(3),S(3),P0(3),PN
	INTEGER I,J
	DO 10 I=1,3
	  P0(I)=0.0
	  DO 10 J=1,3
	    P0(I)=P0(I)+SG(I,J)*P(J)
10    CONTINUE
	PN=0.0
	DO 20 I=1,3
	  PN=PN+P0(I)*P(I)
20    CONTINUE
      SH=0.0
  	DO 30 I=1,3
	  S(I)=P0(I)-PN*P(I)
	  SH=SH+S(I)*S(I)
30    CONTINUE
      SH=SQRT(SH)
	END
